
Small_OS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000b18  00000bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000083  0080006a  0080006a  00000bb6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000be8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c97  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de1  00000000  00000000  00002aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000125a  00000000  00000000  000038cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000434  00000000  00000000  00004b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b47  00000000  00000000  00004f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000152a  00000000  00000000  00005aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00006fcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 87 04 	jmp	0x90e	; 0x90e <__vector_1>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__vector_11>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	e7 00       	.word	0x00e7	; ????
  56:	ef 00       	.word	0x00ef	; ????
  58:	fd 00       	.word	0x00fd	; ????
  5a:	0b 01       	movw	r0, r22
  5c:	18 01       	movw	r2, r16
  5e:	25 01       	movw	r4, r10
  60:	32 01       	movw	r6, r4
  62:	3f 01       	movw	r6, r30

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e8 e1       	ldi	r30, 0x18	; 24
  78:	fb e0       	ldi	r31, 0x0B	; 11
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	aa e6       	ldi	r26, 0x6A	; 106
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	ad 3e       	cpi	r26, 0xED	; 237
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 cf 03 	call	0x79e	; 0x79e <main>
  9a:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <LCD_sendCommand>:
void LCD_intgerToString(uint16 data)
{
	char buff[FIVE]; 
	itoa(data,buff,TEN);
	LCD_displayString(buff);
}
  a2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <task_Count.1836>
  a6:	92 30       	cpi	r25, 0x02	; 2
  a8:	e9 f0       	breq	.+58     	; 0xe4 <LCD_sendCommand+0x42>
  aa:	28 f4       	brcc	.+10     	; 0xb6 <LCD_sendCommand+0x14>
  ac:	99 23       	and	r25, r25
  ae:	41 f0       	breq	.+16     	; 0xc0 <LCD_sendCommand+0x1e>
  b0:	91 30       	cpi	r25, 0x01	; 1
  b2:	89 f0       	breq	.+34     	; 0xd6 <LCD_sendCommand+0x34>
  b4:	39 c0       	rjmp	.+114    	; 0x128 <LCD_sendCommand+0x86>
  b6:	93 30       	cpi	r25, 0x03	; 3
  b8:	e1 f0       	breq	.+56     	; 0xf2 <LCD_sendCommand+0x50>
  ba:	94 30       	cpi	r25, 0x04	; 4
  bc:	41 f1       	breq	.+80     	; 0x10e <LCD_sendCommand+0x6c>
  be:	34 c0       	rjmp	.+104    	; 0x128 <LCD_sendCommand+0x86>
  c0:	9b b3       	in	r25, 0x1b	; 27
  c2:	9f 70       	andi	r25, 0x0F	; 15
  c4:	80 7f       	andi	r24, 0xF0	; 240
  c6:	89 2b       	or	r24, r25
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <task_Count.1836>
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <task_Count.1836>
  d4:	08 95       	ret
  d6:	d9 98       	cbi	0x1b, 1	; 27
  d8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <task_Count.1836>
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <task_Count.1836>
  e2:	08 95       	ret
  e4:	db 9a       	sbi	0x1b, 3	; 27
  e6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <task_Count.1836>
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <task_Count.1836>
  f0:	08 95       	ret
  f2:	2b b3       	in	r18, 0x1b	; 27
  f4:	2f 70       	andi	r18, 0x0F	; 15
  f6:	30 e1       	ldi	r19, 0x10	; 16
  f8:	83 9f       	mul	r24, r19
  fa:	c0 01       	movw	r24, r0
  fc:	11 24       	eor	r1, r1
  fe:	82 2b       	or	r24, r18
 100:	8b bb       	out	0x1b, r24	; 27
 102:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <task_Count.1836>
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <task_Count.1836>
 10c:	08 95       	ret
 10e:	db 9a       	sbi	0x1b, 3	; 27
 110:	db 98       	cbi	0x1b, 3	; 27
 112:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <task_Count.1836>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <task_Count.1836>
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <command_Done>
 122:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <cursor_Flag>
 126:	08 95       	ret
 128:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <task_Count.1836>
 12c:	08 95       	ret

0000012e <LCD_displayCharacter>:
 12e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <char_Count.1847>
 132:	91 30       	cpi	r25, 0x01	; 1
 134:	99 f0       	breq	.+38     	; 0x15c <LCD_displayCharacter+0x2e>
 136:	28 f0       	brcs	.+10     	; 0x142 <LCD_displayCharacter+0x14>
 138:	92 30       	cpi	r25, 0x02	; 2
 13a:	b9 f0       	breq	.+46     	; 0x16a <LCD_displayCharacter+0x3c>
 13c:	93 30       	cpi	r25, 0x03	; 3
 13e:	21 f1       	breq	.+72     	; 0x188 <LCD_displayCharacter+0x5a>
 140:	36 c0       	rjmp	.+108    	; 0x1ae <LCD_displayCharacter+0x80>
 142:	9b b3       	in	r25, 0x1b	; 27
 144:	9f 70       	andi	r25, 0x0F	; 15
 146:	80 7f       	andi	r24, 0xF0	; 240
 148:	89 2b       	or	r24, r25
 14a:	8b bb       	out	0x1b, r24	; 27
 14c:	d9 9a       	sbi	0x1b, 1	; 27
 14e:	db 9a       	sbi	0x1b, 3	; 27
 150:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <char_Count.1847>
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <char_Count.1847>
 15a:	08 95       	ret
 15c:	db 98       	cbi	0x1b, 3	; 27
 15e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <char_Count.1847>
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <char_Count.1847>
 168:	08 95       	ret
 16a:	2b b3       	in	r18, 0x1b	; 27
 16c:	2f 70       	andi	r18, 0x0F	; 15
 16e:	30 e1       	ldi	r19, 0x10	; 16
 170:	83 9f       	mul	r24, r19
 172:	c0 01       	movw	r24, r0
 174:	11 24       	eor	r1, r1
 176:	82 2b       	or	r24, r18
 178:	8b bb       	out	0x1b, r24	; 27
 17a:	db 9a       	sbi	0x1b, 3	; 27
 17c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <char_Count.1847>
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <char_Count.1847>
 186:	08 95       	ret
 188:	db 98       	cbi	0x1b, 3	; 27
 18a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <char_Count.1847>
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <char_Count.1847>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <SEND_COMPLELETE>
 19a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <SEND_COMPLELETE1>
 19e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <cursor_Flag>
 1a2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <string_COUNTer>
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
 1a8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <string_COUNTer>
 1ac:	08 95       	ret
 1ae:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <char_Count.1847>
 1b2:	08 95       	ret

000001b4 <LCD_init>:
	 */
void LCD_init(void)
{
	static uint8 LCD_Init_State = ZERO;
								
	switch(LCD_Init_State)
 1b4:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <LCD_Init_State.1875>
 1b8:	8e 2f       	mov	r24, r30
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	88 30       	cpi	r24, 0x08	; 8
 1be:	91 05       	cpc	r25, r1
 1c0:	08 f0       	brcs	.+2      	; 0x1c4 <LCD_init+0x10>
 1c2:	6e c0       	rjmp	.+220    	; 0x2a0 <LCD_init+0xec>
 1c4:	fc 01       	movw	r30, r24
 1c6:	e6 5d       	subi	r30, 0xD6	; 214
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__tablejump2__>
	{
		
		case ZERO:
			LCD_Dir = INIT_PORT;
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	8a bb       	out	0x1a, r24	; 26
			LCD_Init_State++;	
 1d2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <LCD_Init_State.1875>
 1d6:	8f 5f       	subi	r24, 0xFF	; 255
 1d8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <LCD_Init_State.1875>
		break;
 1dc:	08 95       	ret
		case ONE:
		LCD_sendCommand(INIT_CONTROL);
 1de:	83 e3       	ldi	r24, 0x33	; 51
 1e0:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_sendCommand>
		if(command_Done == ONE)
 1e4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <command_Done>
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	09 f0       	breq	.+2      	; 0x1ee <LCD_init+0x3a>
 1ec:	59 c0       	rjmp	.+178    	; 0x2a0 <LCD_init+0xec>
		{
			LCD_Init_State++;
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <LCD_Init_State.1875>
			command_Done = ZERO;
 1f4:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <command_Done>
 1f8:	08 95       	ret
		}
		
		break;
		case TWO:
		LCD_sendCommand(INIT_CONTROL_TWO);
 1fa:	82 e3       	ldi	r24, 0x32	; 50
 1fc:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_sendCommand>
		if(command_Done == ONE)
 200:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <command_Done>
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	09 f0       	breq	.+2      	; 0x20a <LCD_init+0x56>
 208:	4b c0       	rjmp	.+150    	; 0x2a0 <LCD_init+0xec>
		{
			LCD_Init_State++;
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <LCD_Init_State.1875>
			command_Done = ZERO;
 210:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <command_Done>
 214:	08 95       	ret
		}
		break;
		case THREE:
		LCD_sendCommand(FOUR_BIT_MDOE);
 216:	88 e2       	ldi	r24, 0x28	; 40
 218:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_sendCommand>
		if(command_Done == ONE)
 21c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <command_Done>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	f1 f5       	brne	.+124    	; 0x2a0 <LCD_init+0xec>
		{
			LCD_Init_State++;
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <LCD_Init_State.1875>
			command_Done = ZERO;
 22a:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <command_Done>
 22e:	08 95       	ret
		}
		break;
		case FOUR:
		LCD_sendCommand(CURSOR_OFF);
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_sendCommand>
		if(command_Done == ONE)
 236:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <command_Done>
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	89 f5       	brne	.+98     	; 0x2a0 <LCD_init+0xec>
		{
			LCD_Init_State++;
 23e:	85 e0       	ldi	r24, 0x05	; 5
 240:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <LCD_Init_State.1875>
			command_Done = ZERO;
 244:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <command_Done>
 248:	08 95       	ret
		}
		break;
		case FIVE:
		LCD_sendCommand(ENTRY_MODE);
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_sendCommand>
		if(command_Done == ONE)
 250:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <command_Done>
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	21 f5       	brne	.+72     	; 0x2a0 <LCD_init+0xec>
		{
			LCD_Init_State++;
 258:	86 e0       	ldi	r24, 0x06	; 6
 25a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <LCD_Init_State.1875>
			command_Done = ZERO;
 25e:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <command_Done>
 262:	08 95       	ret
		}
		break;
		case SIX:
		LCD_sendCommand(CLEAR_SCREEN);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_sendCommand>
		if(command_Done == ONE)
 26a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <command_Done>
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	b9 f4       	brne	.+46     	; 0x2a0 <LCD_init+0xec>
		{
			LCD_Init_State++;
 272:	87 e0       	ldi	r24, 0x07	; 7
 274:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <LCD_Init_State.1875>
			command_Done = ZERO;
 278:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <command_Done>
 27c:	08 95       	ret
		}
		break;
		case SEVEN:
		LCD_sendCommand(CURSOR_AT_BEGINNING);
 27e:	80 e8       	ldi	r24, 0x80	; 128
 280:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_sendCommand>
		if(command_Done == ONE)
 284:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <command_Done>
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	29 f4       	brne	.+10     	; 0x296 <LCD_init+0xe2>
		{
			LCD_Init_State++;
 28c:	88 e0       	ldi	r24, 0x08	; 8
 28e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <LCD_Init_State.1875>
			command_Done = ZERO;
 292:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <command_Done>
		}
		init_Done = ONE;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <init_Done>
		init_Not_Done = ONE ;
 29c:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <init_Not_Done>
 2a0:	08 95       	ret

000002a2 <LCD_clearScreen>:

void LCD_clearScreen(void)
{	
	static uint8 step = ZERO ;
	
	switch(step)
 2a2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 2a6:	88 23       	and	r24, r24
 2a8:	19 f0       	breq	.+6      	; 0x2b0 <LCD_clearScreen+0xe>
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	69 f0       	breq	.+26     	; 0x2c8 <LCD_clearScreen+0x26>
 2ae:	19 c0       	rjmp	.+50     	; 0x2e2 <LCD_clearScreen+0x40>
	{
		case ZERO:
			LCD_sendCommand (CLEAR_SCREEN);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_sendCommand>
			if(command_Done == ONE)
 2b6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <command_Done>
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	b9 f4       	brne	.+46     	; 0x2ec <LCD_clearScreen+0x4a>
			{
			step++;
 2be:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
			command_Done = ZERO ;
 2c2:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <command_Done>
 2c6:	08 95       	ret
			}
			break;
		case ONE :
		
			LCD_sendCommand (CURSOR_AT_BEGINNING);
 2c8:	80 e8       	ldi	r24, 0x80	; 128
 2ca:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_sendCommand>
			if(command_Done == ONE)
 2ce:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <command_Done>
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	59 f4       	brne	.+22     	; 0x2ec <LCD_clearScreen+0x4a>
			{
				step++;
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
				command_Done = ZERO;
 2dc:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <command_Done>
 2e0:	08 95       	ret
			}
			break;
		
		default:
			LCD_CLEARED = ONE ;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <LCD_CLEARED>
			step = ZERO ;
 2e8:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
 2ec:	08 95       	ret

000002ee <Ave_button_init>:
	 *					
	 */
void Ave_button_init(uint8 button){
	
	
	switch (button)
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	41 f0       	breq	.+16     	; 0x302 <Ave_button_init+0x14>
 2f2:	84 30       	cpi	r24, 0x04	; 4
 2f4:	59 f4       	brne	.+22     	; 0x30c <Ave_button_init+0x1e>
	{
		case BUTTON_0 :
		gpioPinDirection(PORTC,(ONE<<BUTTON_0),INPUT);
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	60 e1       	ldi	r22, 0x10	; 16
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <gpioPinDirection>
		break;
 300:	08 95       	ret
		
		case BUTTON_1 :
		gpioPinDirection(PORTB,(ONE<<BUTTON_1),INPUT);
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	64 e0       	ldi	r22, 0x04	; 4
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <gpioPinDirection>
 30c:	08 95       	ret

0000030e <Ave_button_read>:
uint8 Ave_button_read(uint8 button){
	
	static uint8 button_Counts	 = ZERO ; 
	static uint8 button_Counts2  = ZERO ; 
	static uint8 button_Flag	 = ZERO ;
	switch (button)
 30e:	82 30       	cpi	r24, 0x02	; 2
 310:	21 f1       	breq	.+72     	; 0x35a <Ave_button_read+0x4c>
 312:	84 30       	cpi	r24, 0x04	; 4
 314:	d9 f5       	brne	.+118    	; 0x38c <Ave_button_read+0x7e>
	{
	
		case BUTTON_0 :
		if(gpioPinRead(PORTC,BUTTON_0))
 316:	64 e0       	ldi	r22, 0x04	; 4
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	0e 94 18 04 	call	0x830	; 0x830 <gpioPinRead>
 31e:	88 23       	and	r24, r24
 320:	c1 f1       	breq	.+112    	; 0x392 <Ave_button_read+0x84>
		{		
			button_Counts++;
 322:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <button_Counts.1646>
 326:	8f 5f       	subi	r24, 0xFF	; 255
 328:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <button_Counts.1646>
			
			if(gpioPinRead(PORTC,BUTTON_0) && button_Counts ==BUTTON_DEBOUNCE)
 32c:	64 e0       	ldi	r22, 0x04	; 4
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	0e 94 18 04 	call	0x830	; 0x830 <gpioPinRead>
 334:	88 23       	and	r24, r24
 336:	69 f0       	breq	.+26     	; 0x352 <Ave_button_read+0x44>
 338:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <button_Counts.1646>
 33c:	8f 30       	cpi	r24, 0x0F	; 15
 33e:	49 f4       	brne	.+18     	; 0x352 <Ave_button_read+0x44>
			{
				button_Counts = ZERO;		
 340:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <button_Counts.1646>
				if(button_Flag == ZERO )
				{
					return ONE ; 
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <button_Flag.1648>
 34a:	99 23       	and	r25, r25
 34c:	11 f1       	breq	.+68     	; 0x392 <Ave_button_read+0x84>
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret
					button_Flag = ONE ;
				}
			}
			else
			{
				button_Flag = ZERO ;
 352:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <button_Flag.1648>
			}
		}
		return ZERO ;
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret
		break;
		
		case BUTTON_1 :
		if(gpioPinRead(PORTB,BUTTON_1))
 35a:	62 e0       	ldi	r22, 0x02	; 2
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 18 04 	call	0x830	; 0x830 <gpioPinRead>
 362:	88 23       	and	r24, r24
 364:	b1 f0       	breq	.+44     	; 0x392 <Ave_button_read+0x84>
		{
			button_Counts2++;
 366:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <button_Counts2.1647>
 36a:	8f 5f       	subi	r24, 0xFF	; 255
 36c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <button_Counts2.1647>
			
			if(gpioPinRead(PORTB,BUTTON_1) && button_Counts2 ==BUTTON_DEBOUNCE)
 370:	62 e0       	ldi	r22, 0x02	; 2
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 18 04 	call	0x830	; 0x830 <gpioPinRead>
 378:	88 23       	and	r24, r24
 37a:	59 f0       	breq	.+22     	; 0x392 <Ave_button_read+0x84>
 37c:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <button_Counts2.1647>
 380:	8f 30       	cpi	r24, 0x0F	; 15
 382:	31 f4       	brne	.+12     	; 0x390 <Ave_button_read+0x82>
			{
				button_Counts2 = ZERO ;
 384:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <button_Counts2.1647>
				return ONE ;
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	08 95       	ret
		}
		return ZERO;
		break;
		
		default:
		return ZERO;
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	08 95       	ret
			{
				button_Counts2 = ZERO ;
				return ONE ;
			}
		}
		return ZERO;
 390:	80 e0       	ldi	r24, 0x00	; 0
		default:
		return ZERO;
		
		
	}
}
 392:	08 95       	ret

00000394 <Timer_Ticks_Detect>:
	 *
	 */
void Timer_Ticks_Detect (void)
{
	
	g_Tick_Flag = ONE;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <g_Tick_Flag>
 39a:	08 95       	ret

0000039c <Sos_Create_Task>:

STATUS Sos_Create_Task(uint8 task_Periority, uint16 task_Periodicity ,pointer_ToFunciton_t ptrTo_Task)
{
	uint8 status = OK;
	
	if(ptrTo_Task == NULL || task_Periodicity <= ZERO)
 39c:	41 15       	cp	r20, r1
 39e:	51 05       	cpc	r21, r1
 3a0:	09 f4       	brne	.+2      	; 0x3a4 <Sos_Create_Task+0x8>
 3a2:	75 c0       	rjmp	.+234    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 3a4:	61 15       	cp	r22, r1
 3a6:	71 05       	cpc	r23, r1
 3a8:	09 f4       	brne	.+2      	; 0x3ac <Sos_Create_Task+0x10>
 3aa:	73 c0       	rjmp	.+230    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
	{
		status = NOT_OK ;
	}
	else
	{	
		Task[g_Generated_Task_Number].Count              =     ZERO             ;
 3ac:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	f9 01       	movw	r30, r18
 3b4:	ee 0f       	add	r30, r30
 3b6:	ff 1f       	adc	r31, r31
 3b8:	ee 0f       	add	r30, r30
 3ba:	ff 1f       	adc	r31, r31
 3bc:	ee 0f       	add	r30, r30
 3be:	ff 1f       	adc	r31, r31
 3c0:	2e 0f       	add	r18, r30
 3c2:	3f 1f       	adc	r19, r31
 3c4:	f9 01       	movw	r30, r18
 3c6:	e6 58       	subi	r30, 0x86	; 134
 3c8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ca:	11 82       	std	Z+1, r1	; 0x01
 3cc:	10 82       	st	Z, r1
		Task[g_Generated_Task_Number].Periodicity		 = task_Periodicity		;
 3ce:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	f9 01       	movw	r30, r18
 3d6:	ee 0f       	add	r30, r30
 3d8:	ff 1f       	adc	r31, r31
 3da:	ee 0f       	add	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	2e 0f       	add	r18, r30
 3e4:	3f 1f       	adc	r19, r31
 3e6:	f9 01       	movw	r30, r18
 3e8:	e6 58       	subi	r30, 0x86	; 134
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	74 83       	std	Z+4, r23	; 0x04
 3ee:	63 83       	std	Z+3, r22	; 0x03
		Task[g_Generated_Task_Number].Periority			 = task_Periority		;
 3f0:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	f9 01       	movw	r30, r18
 3f8:	ee 0f       	add	r30, r30
 3fa:	ff 1f       	adc	r31, r31
 3fc:	ee 0f       	add	r30, r30
 3fe:	ff 1f       	adc	r31, r31
 400:	ee 0f       	add	r30, r30
 402:	ff 1f       	adc	r31, r31
 404:	2e 0f       	add	r18, r30
 406:	3f 1f       	adc	r19, r31
 408:	f9 01       	movw	r30, r18
 40a:	e6 58       	subi	r30, 0x86	; 134
 40c:	ff 4f       	sbci	r31, 0xFF	; 255
 40e:	86 83       	std	Z+6, r24	; 0x06
		Task[g_Generated_Task_Number].ptrToFunction_Task = ptrTo_Task			;
 410:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	fc 01       	movw	r30, r24
 418:	ee 0f       	add	r30, r30
 41a:	ff 1f       	adc	r31, r31
 41c:	ee 0f       	add	r30, r30
 41e:	ff 1f       	adc	r31, r31
 420:	ee 0f       	add	r30, r30
 422:	ff 1f       	adc	r31, r31
 424:	8e 0f       	add	r24, r30
 426:	9f 1f       	adc	r25, r31
 428:	fc 01       	movw	r30, r24
 42a:	e6 58       	subi	r30, 0x86	; 134
 42c:	ff 4f       	sbci	r31, 0xFF	; 255
 42e:	50 87       	std	Z+8, r21	; 0x08
 430:	47 83       	std	Z+7, r20	; 0x07
		Task[g_Generated_Task_Number].ID				 = g_Generated_Task_ID  ;
 432:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 436:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <g_Generated_Task_ID>
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	fc 01       	movw	r30, r24
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	ee 0f       	add	r30, r30
 444:	ff 1f       	adc	r31, r31
 446:	ee 0f       	add	r30, r30
 448:	ff 1f       	adc	r31, r31
 44a:	8e 0f       	add	r24, r30
 44c:	9f 1f       	adc	r25, r31
 44e:	fc 01       	movw	r30, r24
 450:	e6 58       	subi	r30, 0x86	; 134
 452:	ff 4f       	sbci	r31, 0xFF	; 255
 454:	22 83       	std	Z+2, r18	; 0x02
		Task[g_Generated_Task_Number].State				 = READY				;
 456:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	fc 01       	movw	r30, r24
 45e:	ee 0f       	add	r30, r30
 460:	ff 1f       	adc	r31, r31
 462:	ee 0f       	add	r30, r30
 464:	ff 1f       	adc	r31, r31
 466:	ee 0f       	add	r30, r30
 468:	ff 1f       	adc	r31, r31
 46a:	8e 0f       	add	r24, r30
 46c:	9f 1f       	adc	r25, r31
 46e:	fc 01       	movw	r30, r24
 470:	e6 58       	subi	r30, 0x86	; 134
 472:	ff 4f       	sbci	r31, 0xFF	; 255
 474:	15 82       	std	Z+5, r1	; 0x05



static void next_Task_Ready(void)
{
	g_Generated_Task_Number++ ;
 476:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 47a:	8f 5f       	subi	r24, 0xFF	; 255
 47c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <g_Generated_Task_Number>
	g_Generated_Task_ID++	  ;
 480:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <g_Generated_Task_ID>
 484:	8f 5f       	subi	r24, 0xFF	; 255
 486:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <g_Generated_Task_ID>
	 */


STATUS Sos_Create_Task(uint8 task_Periority, uint16 task_Periodicity ,pointer_ToFunciton_t ptrTo_Task)
{
	uint8 status = OK;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	08 95       	ret
	
	if(ptrTo_Task == NULL || task_Periodicity <= ZERO)
	{
		status = NOT_OK ;
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	08 95       	ret
 492:	80 e0       	ldi	r24, 0x00	; 0
		Task[g_Generated_Task_Number].State				 = READY				;
		next_Task_Ready();
	}
	 
	return status ;
}
 494:	08 95       	ret

00000496 <Sos_Init>:
	 *
	 */

STATUS Sos_Init(void)
{
	g_Tick_Flag				= ZERO ;
 496:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <g_Tick_Flag>
	g_Generated_Task_Number = ZERO ;
 49a:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <g_Generated_Task_Number>
	g_Generated_Task_ID		= ZERO ;
 49e:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <g_Generated_Task_ID>
	
	timer_Init(&timer_Zero_Cfg);
 4a2:	81 e6       	ldi	r24, 0x61	; 97
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <timer_Init>
	timer_Set_Count(TIMER_ZERO, RESOLUTION);
 4aa:	6d e7       	ldi	r22, 0x7D	; 125
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	0e 94 32 05 	call	0xa64	; 0xa64 <timer_Set_Count>
	timer0_SetCallBAck(Timer_Ticks_Detect);
 4b2:	8a ec       	ldi	r24, 0xCA	; 202
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	0e 94 40 05 	call	0xa80	; 0xa80 <timer0_SetCallBAck>
	
	return OK;
}
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	08 95       	ret

000004be <Sos_Run>:
void Sos_Run(void)
{
	/*my Dispatcher.
	*/	
	uint8 task_Count  ;
	uint8 highest_Periority			   = Task[g_Generated_Task_Number].Periority ;
 4be:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	fc 01       	movw	r30, r24
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	ee 0f       	add	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	8e 0f       	add	r24, r30
 4d4:	9f 1f       	adc	r25, r31
 4d6:	fc 01       	movw	r30, r24
 4d8:	e6 58       	subi	r30, 0x86	; 134
 4da:	ff 4f       	sbci	r31, 0xFF	; 255
 4dc:	d6 81       	ldd	r29, Z+6	; 0x06
	uint8 Task_Highest_Periority_Index = ZERO;
	timer_Start(TIMER_ZERO);
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <timer_Start>
{
	/*my Dispatcher.
	*/	
	uint8 task_Count  ;
	uint8 highest_Periority			   = Task[g_Generated_Task_Number].Periority ;
	uint8 Task_Highest_Periority_Index = ZERO;
 4e4:	10 e0       	ldi	r17, 0x00	; 0
										}
										
									}
									
									Task[Task_Highest_Periority_Index].ptrToFunction_Task();
									Task[Task_Highest_Periority_Index].State = WAITING     ;	
 4e6:	01 e0       	ldi	r16, 0x01	; 1
	uint8 Task_Highest_Periority_Index = ZERO;
	timer_Start(TIMER_ZERO);
	while(1)
	{
		
		if(g_Tick_Flag == ONE) // Each Tick.
 4e8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <g_Tick_Flag>
 4ec:	81 30       	cpi	r24, 0x01	; 1
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <Sos_Run+0x2a>
		{
			g_Tick_Flag = ZERO ;	
 4f0:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <g_Tick_Flag>
			
			for(task_Count = 0 ; task_Count < g_Generated_Task_Number ; task_Count++)
 4f4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 4f8:	88 23       	and	r24, r24
 4fa:	09 f4       	brne	.+2      	; 0x4fe <Sos_Run+0x40>
 4fc:	70 c0       	rjmp	.+224    	; 0x5de <Sos_Run+0x120>
 4fe:	c0 e0       	ldi	r28, 0x00	; 0
			{
								if(Task[task_Count].State == WAITING)
 500:	2c 2f       	mov	r18, r28
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	f9 01       	movw	r30, r18
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	ee 0f       	add	r30, r30
 50c:	ff 1f       	adc	r31, r31
 50e:	ee 0f       	add	r30, r30
 510:	ff 1f       	adc	r31, r31
 512:	e2 0f       	add	r30, r18
 514:	f3 1f       	adc	r31, r19
 516:	e6 58       	subi	r30, 0x86	; 134
 518:	ff 4f       	sbci	r31, 0xFF	; 255
 51a:	85 81       	ldd	r24, Z+5	; 0x05
 51c:	81 30       	cpi	r24, 0x01	; 1
 51e:	39 f5       	brne	.+78     	; 0x56e <Sos_Run+0xb0>
								{	
									
									Task[task_Count].Count++ ;
 520:	f9 01       	movw	r30, r18
 522:	ee 0f       	add	r30, r30
 524:	ff 1f       	adc	r31, r31
 526:	ee 0f       	add	r30, r30
 528:	ff 1f       	adc	r31, r31
 52a:	ee 0f       	add	r30, r30
 52c:	ff 1f       	adc	r31, r31
 52e:	e2 0f       	add	r30, r18
 530:	f3 1f       	adc	r31, r19
 532:	e6 58       	subi	r30, 0x86	; 134
 534:	ff 4f       	sbci	r31, 0xFF	; 255
 536:	80 81       	ld	r24, Z
 538:	91 81       	ldd	r25, Z+1	; 0x01
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	91 83       	std	Z+1, r25	; 0x01
 53e:	80 83       	st	Z, r24
									
									if(((Task[task_Count].Count) % (Task[task_Count].Periodicity)) == ZERO )
 540:	63 81       	ldd	r22, Z+3	; 0x03
 542:	74 81       	ldd	r23, Z+4	; 0x04
 544:	0e 94 70 05 	call	0xae0	; 0xae0 <__udivmodhi4>
 548:	89 2b       	or	r24, r25
 54a:	09 f0       	breq	.+2      	; 0x54e <Sos_Run+0x90>
 54c:	42 c0       	rjmp	.+132    	; 0x5d2 <Sos_Run+0x114>
									{	
										/*DEBUG!
										gpioPinToggle(PORTC,0x08);
										*/
										Task[task_Count].Count = ZERO ; 
 54e:	f9 01       	movw	r30, r18
 550:	ee 0f       	add	r30, r30
 552:	ff 1f       	adc	r31, r31
 554:	ee 0f       	add	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	ee 0f       	add	r30, r30
 55a:	ff 1f       	adc	r31, r31
 55c:	2e 0f       	add	r18, r30
 55e:	3f 1f       	adc	r19, r31
 560:	f9 01       	movw	r30, r18
 562:	e6 58       	subi	r30, 0x86	; 134
 564:	ff 4f       	sbci	r31, 0xFF	; 255
 566:	11 82       	std	Z+1, r1	; 0x01
 568:	10 82       	st	Z, r1
										Task[task_Count].State = READY ;
 56a:	15 82       	std	Z+5, r1	; 0x05
 56c:	32 c0       	rjmp	.+100    	; 0x5d2 <Sos_Run+0x114>
									}
									
								}
								
								
								else if (Task[task_Count].State == READY)
 56e:	81 11       	cpse	r24, r1
 570:	30 c0       	rjmp	.+96     	; 0x5d2 <Sos_Run+0x114>
								{
									for(int Selected_Arr_Count = ZERO ; Selected_Arr_Count <g_Generated_Task_Number ; Selected_Arr_Count++)
 572:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 576:	88 23       	and	r24, r24
 578:	a9 f0       	breq	.+42     	; 0x5a4 <Sos_Run+0xe6>
 57a:	ef e7       	ldi	r30, 0x7F	; 127
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	20 e0       	ldi	r18, 0x00	; 0
 580:	30 e0       	ldi	r19, 0x00	; 0
									{
										if(Task[Selected_Arr_Count].State == READY)
 582:	80 81       	ld	r24, Z
 584:	81 11       	cpse	r24, r1
 586:	05 c0       	rjmp	.+10     	; 0x592 <Sos_Run+0xd4>
										{
											if(highest_Periority <= Task[Selected_Arr_Count].Periority)
 588:	81 81       	ldd	r24, Z+1	; 0x01
 58a:	8d 17       	cp	r24, r29
 58c:	10 f0       	brcs	.+4      	; 0x592 <Sos_Run+0xd4>
											{
												highest_Periority = Task[Selected_Arr_Count].Periority ;
												Task_Highest_Periority_Index = Selected_Arr_Count;
 58e:	12 2f       	mov	r17, r18
									{
										if(Task[Selected_Arr_Count].State == READY)
										{
											if(highest_Periority <= Task[Selected_Arr_Count].Periority)
											{
												highest_Periority = Task[Selected_Arr_Count].Periority ;
 590:	d8 2f       	mov	r29, r24
								}
								
								
								else if (Task[task_Count].State == READY)
								{
									for(int Selected_Arr_Count = ZERO ; Selected_Arr_Count <g_Generated_Task_Number ; Selected_Arr_Count++)
 592:	2f 5f       	subi	r18, 0xFF	; 255
 594:	3f 4f       	sbci	r19, 0xFF	; 255
 596:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 59a:	39 96       	adiw	r30, 0x09	; 9
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	28 17       	cp	r18, r24
 5a0:	39 07       	cpc	r19, r25
 5a2:	7c f3       	brlt	.-34     	; 0x582 <Sos_Run+0xc4>
											
										}
										
									}
									
									Task[Task_Highest_Periority_Index].ptrToFunction_Task();
 5a4:	e1 2e       	mov	r14, r17
 5a6:	f1 2c       	mov	r15, r1
 5a8:	c7 01       	movw	r24, r14
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	8e 0d       	add	r24, r14
 5b8:	9f 1d       	adc	r25, r15
 5ba:	9c 01       	movw	r18, r24
 5bc:	26 58       	subi	r18, 0x86	; 134
 5be:	3f 4f       	sbci	r19, 0xFF	; 255
 5c0:	79 01       	movw	r14, r18
 5c2:	d9 01       	movw	r26, r18
 5c4:	17 96       	adiw	r26, 0x07	; 7
 5c6:	ed 91       	ld	r30, X+
 5c8:	fc 91       	ld	r31, X
 5ca:	18 97       	sbiw	r26, 0x08	; 8
 5cc:	09 95       	icall
									Task[Task_Highest_Periority_Index].State = WAITING     ;	
 5ce:	f7 01       	movw	r30, r14
 5d0:	05 83       	std	Z+5, r16	; 0x05
		
		if(g_Tick_Flag == ONE) // Each Tick.
		{
			g_Tick_Flag = ZERO ;	
			
			for(task_Count = 0 ; task_Count < g_Generated_Task_Number ; task_Count++)
 5d2:	cf 5f       	subi	r28, 0xFF	; 255
 5d4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 5d8:	c8 17       	cp	r28, r24
 5da:	08 f4       	brcc	.+2      	; 0x5de <Sos_Run+0x120>
 5dc:	91 cf       	rjmp	.-222    	; 0x500 <Sos_Run+0x42>
									Task[task_Count].State == IDLE;
								}
				
			}
		
			highest_Periority = Task[g_Generated_Task_Number].Periority ;
 5de:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	fc 01       	movw	r30, r24
 5e6:	ee 0f       	add	r30, r30
 5e8:	ff 1f       	adc	r31, r31
 5ea:	ee 0f       	add	r30, r30
 5ec:	ff 1f       	adc	r31, r31
 5ee:	ee 0f       	add	r30, r30
 5f0:	ff 1f       	adc	r31, r31
 5f2:	8e 0f       	add	r24, r30
 5f4:	9f 1f       	adc	r25, r31
 5f6:	fc 01       	movw	r30, r24
 5f8:	e6 58       	subi	r30, 0x86	; 134
 5fa:	ff 4f       	sbci	r31, 0xFF	; 255
 5fc:	d6 81       	ldd	r29, Z+6	; 0x06
 5fe:	74 cf       	rjmp	.-280    	; 0x4e8 <Sos_Run+0x2a>

00000600 <Sos_Delete_Task>:
*					OK : Successfully Initialized the timer.
* 				NOT OK : Timer didn't initialized successfully.
*
*/
STATUS Sos_Delete_Task(uint8 Task_Number)
{
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	cd b7       	in	r28, 0x3d	; 61
 606:	de b7       	in	r29, 0x3e	; 62
 608:	29 97       	sbiw	r28, 0x09	; 9
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	f8 94       	cli
 60e:	de bf       	out	0x3e, r29	; 62
 610:	0f be       	out	0x3f, r0	; 63
 612:	cd bf       	out	0x3d, r28	; 61
	uint8 status = OK ;
	task_t temp_Storage ;
	
	if(g_Generated_Task_Number < ONE)
 614:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 618:	99 23       	and	r25, r25
 61a:	09 f4       	brne	.+2      	; 0x61e <Sos_Delete_Task+0x1e>
 61c:	4b c0       	rjmp	.+150    	; 0x6b4 <Sos_Delete_Task+0xb4>
	{
		status = NOT_OK ;
	}
	else
	{
		Task[Task_Number].State = IDLE;
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	9c 01       	movw	r18, r24
 622:	22 0f       	add	r18, r18
 624:	33 1f       	adc	r19, r19
 626:	22 0f       	add	r18, r18
 628:	33 1f       	adc	r19, r19
 62a:	22 0f       	add	r18, r18
 62c:	33 1f       	adc	r19, r19
 62e:	82 0f       	add	r24, r18
 630:	93 1f       	adc	r25, r19
 632:	86 58       	subi	r24, 0x86	; 134
 634:	9f 4f       	sbci	r25, 0xFF	; 255
 636:	22 e0       	ldi	r18, 0x02	; 2
 638:	fc 01       	movw	r30, r24
 63a:	25 83       	std	Z+5, r18	; 0x05
		temp_Storage = Task[Task_Number]				  ;
 63c:	29 e0       	ldi	r18, 0x09	; 9
 63e:	de 01       	movw	r26, r28
 640:	11 96       	adiw	r26, 0x01	; 1
 642:	01 90       	ld	r0, Z+
 644:	0d 92       	st	X+, r0
 646:	2a 95       	dec	r18
 648:	e1 f7       	brne	.-8      	; 0x642 <Sos_Delete_Task+0x42>
		Task[Task_Number] = Task[g_Generated_Task_Number] ;
 64a:	e0 91 d7 00 	lds	r30, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	9f 01       	movw	r18, r30
 652:	22 0f       	add	r18, r18
 654:	33 1f       	adc	r19, r19
 656:	22 0f       	add	r18, r18
 658:	33 1f       	adc	r19, r19
 65a:	22 0f       	add	r18, r18
 65c:	33 1f       	adc	r19, r19
 65e:	e2 0f       	add	r30, r18
 660:	f3 1f       	adc	r31, r19
 662:	e6 58       	subi	r30, 0x86	; 134
 664:	ff 4f       	sbci	r31, 0xFF	; 255
 666:	29 e0       	ldi	r18, 0x09	; 9
 668:	dc 01       	movw	r26, r24
 66a:	01 90       	ld	r0, Z+
 66c:	0d 92       	st	X+, r0
 66e:	2a 95       	dec	r18
 670:	e1 f7       	brne	.-8      	; 0x66a <Sos_Delete_Task+0x6a>
		Task[g_Generated_Task_Number] = temp_Storage	  ;
 672:	a0 91 d7 00 	lds	r26, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 676:	b0 e0       	ldi	r27, 0x00	; 0
 678:	cd 01       	movw	r24, r26
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	a8 0f       	add	r26, r24
 688:	b9 1f       	adc	r27, r25
 68a:	a6 58       	subi	r26, 0x86	; 134
 68c:	bf 4f       	sbci	r27, 0xFF	; 255
 68e:	89 e0       	ldi	r24, 0x09	; 9
 690:	fe 01       	movw	r30, r28
 692:	31 96       	adiw	r30, 0x01	; 1
 694:	01 90       	ld	r0, Z+
 696:	0d 92       	st	X+, r0
 698:	8a 95       	dec	r24
 69a:	e1 f7       	brne	.-8      	; 0x694 <Sos_Delete_Task+0x94>
		g_Generated_Task_Number--;
 69c:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <g_Generated_Task_Number>
 6a0:	81 50       	subi	r24, 0x01	; 1
 6a2:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <g_Generated_Task_Number>
		g_Generated_Task_ID--;
 6a6:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <g_Generated_Task_ID>
 6aa:	81 50       	subi	r24, 0x01	; 1
 6ac:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <g_Generated_Task_ID>
* 				NOT OK : Timer didn't initialized successfully.
*
*/
STATUS Sos_Delete_Task(uint8 Task_Number)
{
	uint8 status = OK ;
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <Sos_Delete_Task+0xb6>
	task_t temp_Storage ;
	
	if(g_Generated_Task_Number < ONE)
	{
		status = NOT_OK ;
 6b4:	80 e0       	ldi	r24, 0x00	; 0
		
	}
	
	
	return status ;
}
 6b6:	29 96       	adiw	r28, 0x09	; 9
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	f8 94       	cli
 6bc:	de bf       	out	0x3e, r29	; 62
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	cd bf       	out	0x3d, r28	; 61
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	08 95       	ret

000006c8 <Sos_Task_NIGNTY_ms>:
STATUS Sos_Task_NIGNTY_ms(void)
{
		
		static uint8 task_Counter = ZERO ;
		
		if (Ave_button_read(BUTTON_0))
 6c8:	84 e0       	ldi	r24, 0x04	; 4
 6ca:	0e 94 87 01 	call	0x30e	; 0x30e <Ave_button_read>
 6ce:	88 23       	and	r24, r24
 6d0:	29 f0       	breq	.+10     	; 0x6dc <Sos_Task_NIGNTY_ms+0x14>
		{
			button_PUSH++;
 6d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6d6:	8f 5f       	subi	r24, 0xFF	; 255
 6d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		if (Ave_button_read(BUTTON_1))
 6dc:	82 e0       	ldi	r24, 0x02	; 2
 6de:	0e 94 87 01 	call	0x30e	; 0x30e <Ave_button_read>
 6e2:	88 23       	and	r24, r24
 6e4:	29 f0       	breq	.+10     	; 0x6f0 <Sos_Task_NIGNTY_ms+0x28>
		{
			button_PUSH--;
 6e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6ea:	81 50       	subi	r24, 0x01	; 1
 6ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		
		switch(task_Counter)
 6f0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <task_Counter.1776>
 6f4:	81 30       	cpi	r24, 0x01	; 1
 6f6:	a1 f0       	breq	.+40     	; 0x720 <Sos_Task_NIGNTY_ms+0x58>
 6f8:	18 f0       	brcs	.+6      	; 0x700 <Sos_Task_NIGNTY_ms+0x38>
 6fa:	82 30       	cpi	r24, 0x02	; 2
 6fc:	f9 f0       	breq	.+62     	; 0x73c <Sos_Task_NIGNTY_ms+0x74>
 6fe:	20 c0       	rjmp	.+64     	; 0x740 <Sos_Task_NIGNTY_ms+0x78>
		{
			case ZERO :
			LCD_displayCharacter(button_PUSH);
 700:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 704:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_displayCharacter>
			
			if(SEND_COMPLELETE == ONE)
 708:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <SEND_COMPLELETE>
 70c:	81 30       	cpi	r24, 0x01	; 1
 70e:	c1 f4       	brne	.+48     	; 0x740 <Sos_Task_NIGNTY_ms+0x78>
			{
				task_Counter++;
 710:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <task_Counter.1776>
 714:	8f 5f       	subi	r24, 0xFF	; 255
 716:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <task_Counter.1776>
				SEND_COMPLELETE = ZERO ;
 71a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <SEND_COMPLELETE>
 71e:	10 c0       	rjmp	.+32     	; 0x740 <Sos_Task_NIGNTY_ms+0x78>
			}
			
			break;
			
			case ONE:
			LCD_clearScreen();
 720:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_clearScreen>
			
			if(LCD_CLEARED == ONE)
 724:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <LCD_CLEARED>
 728:	81 30       	cpi	r24, 0x01	; 1
 72a:	51 f4       	brne	.+20     	; 0x740 <Sos_Task_NIGNTY_ms+0x78>
			{
				task_Counter++;
 72c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <task_Counter.1776>
 730:	8f 5f       	subi	r24, 0xFF	; 255
 732:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <task_Counter.1776>
				LCD_CLEARED = ZERO ;
 736:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <LCD_CLEARED>
 73a:	02 c0       	rjmp	.+4      	; 0x740 <Sos_Task_NIGNTY_ms+0x78>
			}
			
			break;
			case 2 :
			task_Counter = ZERO ;
 73c:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <task_Counter.1776>
			default :
			break;
		}
		
	return OK;
}
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	08 95       	ret

00000744 <SoS_Init_Tasks>:
void SoS_Init_Tasks(void)
{
	
	
	static uint8 Init_Task_State = ZERO;
	switch(Init_Task_State)
 744:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Init_Task_State.1785>
 748:	88 23       	and	r24, r24
 74a:	19 f0       	breq	.+6      	; 0x752 <SoS_Init_Tasks+0xe>
 74c:	81 30       	cpi	r24, 0x01	; 1
 74e:	51 f0       	breq	.+20     	; 0x764 <SoS_Init_Tasks+0x20>
 750:	15 c0       	rjmp	.+42     	; 0x77c <SoS_Init_Tasks+0x38>
	{
		case ZERO :
			Ave_button_init(BUTTON_0);
 752:	84 e0       	ldi	r24, 0x04	; 4
 754:	0e 94 77 01 	call	0x2ee	; 0x2ee <Ave_button_init>
			Init_Task_State++;
 758:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Init_Task_State.1785>
 75c:	8f 5f       	subi	r24, 0xFF	; 255
 75e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <Init_Task_State.1785>
		
		break;
 762:	0f c0       	rjmp	.+30     	; 0x782 <SoS_Init_Tasks+0x3e>
		
		case ONE :
		LCD_init();
 764:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_init>
		
		if(init_Not_Done == ONE)
 768:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <init_Not_Done>
 76c:	81 30       	cpi	r24, 0x01	; 1
 76e:	49 f4       	brne	.+18     	; 0x782 <SoS_Init_Tasks+0x3e>
		{
			Init_Task_State++;
 770:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Init_Task_State.1785>
 774:	8f 5f       	subi	r24, 0xFF	; 255
 776:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <Init_Task_State.1785>
 77a:	03 c0       	rjmp	.+6      	; 0x782 <SoS_Init_Tasks+0x3e>
			
		}
		break;
		
		default:
		init_Is_Done = ONE ;
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <init_Is_Done>
		
		break;
	}
	
	if(init_Is_Done == ONE)
 782:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <init_Is_Done>
 786:	81 30       	cpi	r24, 0x01	; 1
 788:	19 f4       	brne	.+6      	; 0x790 <SoS_Init_Tasks+0x4c>
	{
		Sos_Delete_Task(ZERO);
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	0e 94 00 03 	call	0x600	; 0x600 <Sos_Delete_Task>
 790:	08 95       	ret

00000792 <task_Execute>:

void task_Execute (void)
{
	
	
	Sos_Task_NIGNTY_ms();
 792:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Sos_Task_NIGNTY_ms>
 796:	08 95       	ret

00000798 <task_Init>:
}


void task_Init(void)
{
	SoS_Init_Tasks();
 798:	0e 94 a2 03 	call	0x744	; 0x744 <SoS_Init_Tasks>
 79c:	08 95       	ret

0000079e <main>:
#endif


int main(void)
{	
	Sos_Init();
 79e:	0e 94 4b 02 	call	0x496	; 0x496 <Sos_Init>
	Sos_Create_Task(1,1,task_Execute);
 7a2:	49 ec       	ldi	r20, 0xC9	; 201
 7a4:	53 e0       	ldi	r21, 0x03	; 3
 7a6:	61 e0       	ldi	r22, 0x01	; 1
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	0e 94 ce 01 	call	0x39c	; 0x39c <Sos_Create_Task>
	Sos_Create_Task(3,5,task_Init);
 7b0:	4c ec       	ldi	r20, 0xCC	; 204
 7b2:	53 e0       	ldi	r21, 0x03	; 3
 7b4:	65 e0       	ldi	r22, 0x05	; 5
 7b6:	70 e0       	ldi	r23, 0x00	; 0
 7b8:	83 e0       	ldi	r24, 0x03	; 3
 7ba:	0e 94 ce 01 	call	0x39c	; 0x39c <Sos_Create_Task>
	
	
	Sos_Run();
 7be:	0e 94 5f 02 	call	0x4be	; 0x4be <Sos_Run>
}
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	08 95       	ret

000007c8 <gpioPinDirection>:
		case PORTC :
			PORTC_DATA ^=pins;
			break;
		
		case PORTD :
			PORTD_DATA ^= pins;
 7c8:	81 30       	cpi	r24, 0x01	; 1
 7ca:	89 f0       	breq	.+34     	; 0x7ee <gpioPinDirection+0x26>
 7cc:	28 f0       	brcs	.+10     	; 0x7d8 <gpioPinDirection+0x10>
 7ce:	82 30       	cpi	r24, 0x02	; 2
 7d0:	c9 f0       	breq	.+50     	; 0x804 <gpioPinDirection+0x3c>
 7d2:	83 30       	cpi	r24, 0x03	; 3
 7d4:	11 f1       	breq	.+68     	; 0x81a <gpioPinDirection+0x52>
 7d6:	08 95       	ret
 7d8:	4f 3f       	cpi	r20, 0xFF	; 255
 7da:	21 f4       	brne	.+8      	; 0x7e4 <gpioPinDirection+0x1c>
 7dc:	8a b3       	in	r24, 0x1a	; 26
 7de:	68 2b       	or	r22, r24
 7e0:	6a bb       	out	0x1a, r22	; 26
 7e2:	08 95       	ret
 7e4:	8a b3       	in	r24, 0x1a	; 26
 7e6:	60 95       	com	r22
 7e8:	68 23       	and	r22, r24
 7ea:	6a bb       	out	0x1a, r22	; 26
 7ec:	08 95       	ret
 7ee:	4f 3f       	cpi	r20, 0xFF	; 255
 7f0:	21 f4       	brne	.+8      	; 0x7fa <gpioPinDirection+0x32>
 7f2:	87 b3       	in	r24, 0x17	; 23
 7f4:	68 2b       	or	r22, r24
 7f6:	67 bb       	out	0x17, r22	; 23
 7f8:	08 95       	ret
 7fa:	87 b3       	in	r24, 0x17	; 23
 7fc:	60 95       	com	r22
 7fe:	68 23       	and	r22, r24
 800:	67 bb       	out	0x17, r22	; 23
 802:	08 95       	ret
 804:	4f 3f       	cpi	r20, 0xFF	; 255
 806:	21 f4       	brne	.+8      	; 0x810 <gpioPinDirection+0x48>
 808:	84 b3       	in	r24, 0x14	; 20
 80a:	68 2b       	or	r22, r24
 80c:	64 bb       	out	0x14, r22	; 20
 80e:	08 95       	ret
 810:	84 b3       	in	r24, 0x14	; 20
 812:	60 95       	com	r22
 814:	68 23       	and	r22, r24
 816:	64 bb       	out	0x14, r22	; 20
 818:	08 95       	ret
 81a:	4f 3f       	cpi	r20, 0xFF	; 255
 81c:	21 f4       	brne	.+8      	; 0x826 <gpioPinDirection+0x5e>
 81e:	81 b3       	in	r24, 0x11	; 17
 820:	68 2b       	or	r22, r24
 822:	61 bb       	out	0x11, r22	; 17
 824:	08 95       	ret
 826:	81 b3       	in	r24, 0x11	; 17
 828:	60 95       	com	r22
 82a:	68 23       	and	r22, r24
 82c:	61 bb       	out	0x11, r22	; 17
 82e:	08 95       	ret

00000830 <gpioPinRead>:
 * Description:  Function is used to read the Pin.
 * @param port
 * @param pin
 * @return
 */
	switch (port)
 830:	81 30       	cpi	r24, 0x01	; 1
 832:	c1 f0       	breq	.+48     	; 0x864 <__stack+0x5>
 834:	28 f0       	brcs	.+10     	; 0x840 <gpioPinRead+0x10>
 836:	82 30       	cpi	r24, 0x02	; 2
 838:	39 f1       	breq	.+78     	; 0x888 <__stack+0x29>
 83a:	83 30       	cpi	r24, 0x03	; 3
 83c:	b9 f1       	breq	.+110    	; 0x8ac <__stack+0x4d>
 83e:	48 c0       	rjmp	.+144    	; 0x8d0 <__stack+0x71>
	{
		case PORTA :
			return (READ_BIT(PORTA_PIN,pin) >> pin );
 840:	29 b3       	in	r18, 0x19	; 25
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	06 2e       	mov	r0, r22
 848:	02 c0       	rjmp	.+4      	; 0x84e <gpioPinRead+0x1e>
 84a:	88 0f       	add	r24, r24
 84c:	99 1f       	adc	r25, r25
 84e:	0a 94       	dec	r0
 850:	e2 f7       	brpl	.-8      	; 0x84a <gpioPinRead+0x1a>
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	82 23       	and	r24, r18
 856:	93 23       	and	r25, r19
 858:	02 c0       	rjmp	.+4      	; 0x85e <gpioPinRead+0x2e>
 85a:	95 95       	asr	r25
 85c:	87 95       	ror	r24
 85e:	6a 95       	dec	r22
 860:	e2 f7       	brpl	.-8      	; 0x85a <gpioPinRead+0x2a>
 862:	08 95       	ret
		break;
		
		case PORTB :
			return (READ_BIT(PORTB_PIN,pin) >> pin );
 864:	26 b3       	in	r18, 0x16	; 22
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	06 2e       	mov	r0, r22
 86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
 86e:	88 0f       	add	r24, r24
 870:	99 1f       	adc	r25, r25
 872:	0a 94       	dec	r0
 874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	82 23       	and	r24, r18
 87a:	93 23       	and	r25, r19
 87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
 87e:	95 95       	asr	r25
 880:	87 95       	ror	r24
 882:	6a 95       	dec	r22
 884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
 886:	08 95       	ret
		break;
		
		case PORTC :
			return (READ_BIT(PORTC_PIN,pin) >> pin );
 888:	23 b3       	in	r18, 0x13	; 19
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	06 2e       	mov	r0, r22
 890:	02 c0       	rjmp	.+4      	; 0x896 <__stack+0x37>
 892:	88 0f       	add	r24, r24
 894:	99 1f       	adc	r25, r25
 896:	0a 94       	dec	r0
 898:	e2 f7       	brpl	.-8      	; 0x892 <__stack+0x33>
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	82 23       	and	r24, r18
 89e:	93 23       	and	r25, r19
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <__stack+0x47>
 8a2:	95 95       	asr	r25
 8a4:	87 95       	ror	r24
 8a6:	6a 95       	dec	r22
 8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <__stack+0x43>
 8aa:	08 95       	ret
		break;
		
		case PORTD :
			return (READ_BIT(PORTD_PIN,pin) >> pin );
 8ac:	20 b3       	in	r18, 0x10	; 16
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	06 2e       	mov	r0, r22
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__stack+0x5b>
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	0a 94       	dec	r0
 8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <__stack+0x57>
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	82 23       	and	r24, r18
 8c2:	93 23       	and	r25, r19
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <__stack+0x6b>
 8c6:	95 95       	asr	r25
 8c8:	87 95       	ror	r24
 8ca:	6a 95       	dec	r22
 8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <__stack+0x67>
 8ce:	08 95       	ret
		
		default :
		break;
		
	}
	return (READ_BIT(port,pin) >> pin );
 8d0:	41 e0       	ldi	r20, 0x01	; 1
 8d2:	50 e0       	ldi	r21, 0x00	; 0
 8d4:	06 2e       	mov	r0, r22
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__stack+0x7d>
 8d8:	44 0f       	add	r20, r20
 8da:	55 1f       	adc	r21, r21
 8dc:	0a 94       	dec	r0
 8de:	e2 f7       	brpl	.-8      	; 0x8d8 <__stack+0x79>
 8e0:	28 2f       	mov	r18, r24
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	ca 01       	movw	r24, r20
 8e6:	82 23       	and	r24, r18
 8e8:	93 23       	and	r25, r19
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <__stack+0x91>
 8ec:	95 95       	asr	r25
 8ee:	87 95       	ror	r24
 8f0:	6a 95       	dec	r22
 8f2:	e2 f7       	brpl	.-8      	; 0x8ec <__stack+0x8d>
}
 8f4:	08 95       	ret

000008f6 <Ex_Interrupt_Zero>:
		 *
		 * @param IN: void.
		 *
		 * @return: void.
		 */
	GICR &= ~PIN_SIX;
 8f6:	95 b7       	in	r25, 0x35	; 53
 8f8:	9c 7f       	andi	r25, 0xFC	; 252
 8fa:	83 70       	andi	r24, 0x03	; 3
 8fc:	89 2b       	or	r24, r25
 8fe:	85 bf       	out	0x35, r24	; 53
 900:	8f b7       	in	r24, 0x3f	; 63
 902:	80 68       	ori	r24, 0x80	; 128
 904:	8f bf       	out	0x3f, r24	; 63
 906:	8b b7       	in	r24, 0x3b	; 59
 908:	80 64       	ori	r24, 0x40	; 64
 90a:	8b bf       	out	0x3b, r24	; 59
 90c:	08 95       	ret

0000090e <__vector_1>:
}



ISR(INT0_vect){
 90e:	1f 92       	push	r1
 910:	0f 92       	push	r0
 912:	0f b6       	in	r0, 0x3f	; 63
 914:	0f 92       	push	r0
 916:	11 24       	eor	r1, r1
 918:	2f 93       	push	r18
 91a:	3f 93       	push	r19
 91c:	4f 93       	push	r20
 91e:	5f 93       	push	r21
 920:	6f 93       	push	r22
 922:	7f 93       	push	r23
 924:	8f 93       	push	r24
 926:	9f 93       	push	r25
 928:	af 93       	push	r26
 92a:	bf 93       	push	r27
 92c:	ef 93       	push	r30
 92e:	ff 93       	push	r31

	EX_Int_Flag++;
 930:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <EX_Int_Flag>
 934:	8f 5f       	subi	r24, 0xFF	; 255
 936:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <EX_Int_Flag>

	if(EX_Int_Flag == 1)
 93a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <EX_Int_Flag>
 93e:	81 30       	cpi	r24, 0x01	; 1
 940:	69 f4       	brne	.+26     	; 0x95c <__vector_1+0x4e>
	{

		Ex_Interrupt_Zero(FALLING_EDGE);
 942:	82 e0       	ldi	r24, 0x02	; 2
 944:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <Ex_Interrupt_Zero>
		TCNT0 = CLEARED;
 948:	12 be       	out	0x32, r1	; 50
		timer0_OVF_Flag = CLEARED ;
 94a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <timer0_OVF_Flag>
 94e:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <timer0_OVF_Flag+0x1>
 952:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <timer0_OVF_Flag+0x2>
 956:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <timer0_OVF_Flag+0x3>
 95a:	25 c0       	rjmp	.+74     	; 0x9a6 <__vector_1+0x98>


	}

	else if (EX_Int_Flag >=2)
 95c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <EX_Int_Flag>
 960:	82 30       	cpi	r24, 0x02	; 2
 962:	08 f1       	brcs	.+66     	; 0x9a6 <__vector_1+0x98>
	{


		EX_Int_Flag = CLEARED ;
 964:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <EX_Int_Flag>
		capture = TCNT0;
 968:	82 b7       	in	r24, 0x32	; 50
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	a0 e0       	ldi	r26, 0x00	; 0
 96e:	b0 e0       	ldi	r27, 0x00	; 0
 970:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <capture>
 974:	90 93 de 00 	sts	0x00DE, r25	; 0x8000de <capture+0x1>
 978:	a0 93 df 00 	sts	0x00DF, r26	; 0x8000df <capture+0x2>
 97c:	b0 93 e0 00 	sts	0x00E0, r27	; 0x8000e0 <capture+0x3>
		last_Ticks = timer0_OVF_Flag;
 980:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <timer0_OVF_Flag>
 984:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <timer0_OVF_Flag+0x1>
 988:	a0 91 e4 00 	lds	r26, 0x00E4	; 0x8000e4 <timer0_OVF_Flag+0x2>
 98c:	b0 91 e5 00 	lds	r27, 0x00E5	; 0x8000e5 <timer0_OVF_Flag+0x3>
 990:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <last_Ticks>
 994:	90 93 da 00 	sts	0x00DA, r25	; 0x8000da <last_Ticks+0x1>
 998:	a0 93 db 00 	sts	0x00DB, r26	; 0x8000db <last_Ticks+0x2>
 99c:	b0 93 dc 00 	sts	0x00DC, r27	; 0x8000dc <last_Ticks+0x3>
		Ex_Interrupt_Zero(RISING_EDGE);
 9a0:	83 e0       	ldi	r24, 0x03	; 3
 9a2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <Ex_Interrupt_Zero>
		
	}



}
 9a6:	ff 91       	pop	r31
 9a8:	ef 91       	pop	r30
 9aa:	bf 91       	pop	r27
 9ac:	af 91       	pop	r26
 9ae:	9f 91       	pop	r25
 9b0:	8f 91       	pop	r24
 9b2:	7f 91       	pop	r23
 9b4:	6f 91       	pop	r22
 9b6:	5f 91       	pop	r21
 9b8:	4f 91       	pop	r20
 9ba:	3f 91       	pop	r19
 9bc:	2f 91       	pop	r18
 9be:	0f 90       	pop	r0
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	0f 90       	pop	r0
 9c4:	1f 90       	pop	r1
 9c6:	18 95       	reti

000009c8 <timer_Init>:
			
		}
	}

return NOT_OK;
}
 9c8:	fc 01       	movw	r30, r24
 9ca:	89 2b       	or	r24, r25
 9cc:	e1 f1       	breq	.+120    	; 0xa46 <timer_Init+0x7e>
 9ce:	80 81       	ld	r24, Z
 9d0:	81 11       	cpse	r24, r1
 9d2:	3b c0       	rjmp	.+118    	; 0xa4a <timer_Init+0x82>
 9d4:	82 81       	ldd	r24, Z+2	; 0x02
 9d6:	93 81       	ldd	r25, Z+3	; 0x03
 9d8:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <g_count+0x1>
 9dc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <g_count>
 9e0:	83 b7       	in	r24, 0x33	; 51
 9e2:	80 68       	ori	r24, 0x80	; 128
 9e4:	83 bf       	out	0x33, r24	; 51
 9e6:	12 be       	out	0x32, r1	; 50
 9e8:	84 81       	ldd	r24, Z+4	; 0x04
 9ea:	81 11       	cpse	r24, r1
 9ec:	12 c0       	rjmp	.+36     	; 0xa12 <timer_Init+0x4a>
 9ee:	81 e0       	ldi	r24, 0x01	; 1
 9f0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <g_Int_Polling>
 9f4:	81 81       	ldd	r24, Z+1	; 0x01
 9f6:	81 30       	cpi	r24, 0x01	; 1
 9f8:	29 f4       	brne	.+10     	; 0xa04 <timer_Init+0x3c>
 9fa:	86 e0       	ldi	r24, 0x06	; 6
 9fc:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <g_Prescaler>
 a00:	81 e0       	ldi	r24, 0x01	; 1
 a02:	08 95       	ret
 a04:	81 11       	cpse	r24, r1
 a06:	23 c0       	rjmp	.+70     	; 0xa4e <timer_Init+0x86>
 a08:	85 e0       	ldi	r24, 0x05	; 5
 a0a:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <g_Prescaler>
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	08 95       	ret
 a12:	81 30       	cpi	r24, 0x01	; 1
 a14:	f1 f4       	brne	.+60     	; 0xa52 <timer_Init+0x8a>
 a16:	8f b7       	in	r24, 0x3f	; 63
 a18:	80 68       	ori	r24, 0x80	; 128
 a1a:	8f bf       	out	0x3f, r24	; 63
 a1c:	82 e0       	ldi	r24, 0x02	; 2
 a1e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <g_Int_Polling>
 a22:	89 b7       	in	r24, 0x39	; 57
 a24:	81 60       	ori	r24, 0x01	; 1
 a26:	89 bf       	out	0x39, r24	; 57
 a28:	81 81       	ldd	r24, Z+1	; 0x01
 a2a:	81 30       	cpi	r24, 0x01	; 1
 a2c:	29 f4       	brne	.+10     	; 0xa38 <timer_Init+0x70>
 a2e:	86 e0       	ldi	r24, 0x06	; 6
 a30:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <g_Prescaler>
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	08 95       	ret
 a38:	81 11       	cpse	r24, r1
 a3a:	0d c0       	rjmp	.+26     	; 0xa56 <timer_Init+0x8e>
 a3c:	85 e0       	ldi	r24, 0x05	; 5
 a3e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <g_Prescaler>
 a42:	81 e0       	ldi	r24, 0x01	; 1
 a44:	08 95       	ret
 a46:	80 e0       	ldi	r24, 0x00	; 0
 a48:	08 95       	ret
 a4a:	81 e0       	ldi	r24, 0x01	; 1
 a4c:	08 95       	ret
 a4e:	81 e0       	ldi	r24, 0x01	; 1
 a50:	08 95       	ret
 a52:	81 e0       	ldi	r24, 0x01	; 1
 a54:	08 95       	ret
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	08 95       	ret

00000a5a <timer_Start>:
 a5a:	83 b7       	in	r24, 0x33	; 51
 a5c:	88 7f       	andi	r24, 0xF8	; 248
 a5e:	83 60       	ori	r24, 0x03	; 3
 a60:	83 bf       	out	0x33, r24	; 51
 a62:	08 95       	ret

00000a64 <timer_Set_Count>:
 a64:	81 11       	cpse	r24, r1
 a66:	08 c0       	rjmp	.+16     	; 0xa78 <timer_Set_Count+0x14>
 a68:	6f 3f       	cpi	r22, 0xFF	; 255
 a6a:	41 f0       	breq	.+16     	; 0xa7c <timer_Set_Count+0x18>
 a6c:	60 93 e6 00 	sts	0x00E6, r22	; 0x8000e6 <g_my_Count>
 a70:	60 95       	com	r22
 a72:	62 bf       	out	0x32, r22	; 50
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	08 95       	ret
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	08 95       	ret
 a7c:	80 e0       	ldi	r24, 0x00	; 0
 a7e:	08 95       	ret

00000a80 <timer0_SetCallBAck>:


void timer0_SetCallBAck(void (*ptrTo_Func) (void))
{
	
	g_ptr_Timer0_CallBack = ptrTo_Func ;
 a80:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <g_ptr_Timer0_CallBack+0x1>
 a84:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <g_ptr_Timer0_CallBack>
 a88:	08 95       	ret

00000a8a <__vector_11>:
	
}


ISR(TIMER0_OVF_vect){
 a8a:	1f 92       	push	r1
 a8c:	0f 92       	push	r0
 a8e:	0f b6       	in	r0, 0x3f	; 63
 a90:	0f 92       	push	r0
 a92:	11 24       	eor	r1, r1
 a94:	2f 93       	push	r18
 a96:	3f 93       	push	r19
 a98:	4f 93       	push	r20
 a9a:	5f 93       	push	r21
 a9c:	6f 93       	push	r22
 a9e:	7f 93       	push	r23
 aa0:	8f 93       	push	r24
 aa2:	9f 93       	push	r25
 aa4:	af 93       	push	r26
 aa6:	bf 93       	push	r27
 aa8:	ef 93       	push	r30
 aaa:	ff 93       	push	r31
	
	TCNT0 = TIMER_0_OV -  g_my_Count;
 aac:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <g_my_Count>
 ab0:	80 95       	com	r24
 ab2:	82 bf       	out	0x32, r24	; 50
	g_ptr_Timer0_CallBack();
 ab4:	e0 91 e7 00 	lds	r30, 0x00E7	; 0x8000e7 <g_ptr_Timer0_CallBack>
 ab8:	f0 91 e8 00 	lds	r31, 0x00E8	; 0x8000e8 <g_ptr_Timer0_CallBack+0x1>
 abc:	09 95       	icall
	
	//gpioPinDirection(PORTA,0xff,OUTPUT);
	//gpioPinToggle(PORTA,0xff);
	//
	
 abe:	ff 91       	pop	r31
 ac0:	ef 91       	pop	r30
 ac2:	bf 91       	pop	r27
 ac4:	af 91       	pop	r26
 ac6:	9f 91       	pop	r25
 ac8:	8f 91       	pop	r24
 aca:	7f 91       	pop	r23
 acc:	6f 91       	pop	r22
 ace:	5f 91       	pop	r21
 ad0:	4f 91       	pop	r20
 ad2:	3f 91       	pop	r19
 ad4:	2f 91       	pop	r18
 ad6:	0f 90       	pop	r0
 ad8:	0f be       	out	0x3f, r0	; 63
 ada:	0f 90       	pop	r0
 adc:	1f 90       	pop	r1
 ade:	18 95       	reti

00000ae0 <__udivmodhi4>:
 ae0:	aa 1b       	sub	r26, r26
 ae2:	bb 1b       	sub	r27, r27
 ae4:	51 e1       	ldi	r21, 0x11	; 17
 ae6:	07 c0       	rjmp	.+14     	; 0xaf6 <__udivmodhi4_ep>

00000ae8 <__udivmodhi4_loop>:
 ae8:	aa 1f       	adc	r26, r26
 aea:	bb 1f       	adc	r27, r27
 aec:	a6 17       	cp	r26, r22
 aee:	b7 07       	cpc	r27, r23
 af0:	10 f0       	brcs	.+4      	; 0xaf6 <__udivmodhi4_ep>
 af2:	a6 1b       	sub	r26, r22
 af4:	b7 0b       	sbc	r27, r23

00000af6 <__udivmodhi4_ep>:
 af6:	88 1f       	adc	r24, r24
 af8:	99 1f       	adc	r25, r25
 afa:	5a 95       	dec	r21
 afc:	a9 f7       	brne	.-22     	; 0xae8 <__udivmodhi4_loop>
 afe:	80 95       	com	r24
 b00:	90 95       	com	r25
 b02:	bc 01       	movw	r22, r24
 b04:	cd 01       	movw	r24, r26
 b06:	08 95       	ret

00000b08 <__tablejump2__>:
 b08:	ee 0f       	add	r30, r30
 b0a:	ff 1f       	adc	r31, r31
 b0c:	05 90       	lpm	r0, Z+
 b0e:	f4 91       	lpm	r31, Z
 b10:	e0 2d       	mov	r30, r0
 b12:	09 94       	ijmp

00000b14 <_exit>:
 b14:	f8 94       	cli

00000b16 <__stop_program>:
 b16:	ff cf       	rjmp	.-2      	; 0xb16 <__stop_program>
